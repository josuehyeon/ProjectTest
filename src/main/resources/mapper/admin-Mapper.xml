<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 모든 SQL문을 mapper태그 안에 작성 -->
<mapper namespace="adminMapper">

	<resultMap type="com.kh.project.admin.vo.AdminVO" id="admin">
		<id 	column="YELL_NO" 		property="yellNo" />
		<result column="STU_NO" 		property="stuNo" />
		<result column="YELLDATE" 		property="yellDate" />
		<result column="YELLSEMESTER" 	property="yellSemester" />
		<result column="YELLREASON" 	property="yellReason" />
		<result column="SEMNO" 			property="semNo" />

		<association property="studentInfo" resultMap="studentMapper.student"/>
		<association property="semesterInfo" resultMap="gradeMapper.semester"/>
		<association property="memberInfo" resultMap="memberMapper.member"/>
		<association property="collegeInfo" resultMap="collegeMapper.college"/>
		<association property="deptInfo" resultMap="deptMapper.dept"/>
	</resultMap>
	
	<insert id="insertYellowCard">
		INSERT INTO YELLOW_CARD (
		    YELL_NO
		    , STU_NO
		    , YELL_SEMESTER
		    , YELL_REASON
		) VALUES (
		    (SELECT NVL(MAX(YELL_NO) + 1, 1) FROM YELLOW_CARD)
		    , #{stuNo}
		    , (SELECT CASE
		        WHEN TO_NUMBER(SUBSTR(TO_CHAR(SYSDATE, 'YYYYMMDD'), 5, 2)) &lt;= 6 THEN 1
		        ELSE 2
		        END 
		        FROM DUAL)
		    , #{yellReason}
		)
	</insert>
		
	<select id="selectModalStudent" resultMap="studentMapper.student">
		SELECT 
		    MEM_NAME
		    , STU_YEAR
		    , DECODE(MEM_GEN, 'F', '여자', 'M', '남자') AS MEM_GEN
		    , TO_CHAR(MEM_BIRTH, 'YYYY-MM-DD') AS MEM_BIRTH
		    , C.COLL_NO
		    , COLL_NAME
		    , S.STU_NO
		    , S.MAJOR_CODE
		    , (SELECT DEPT_NAME
		        FROM DEPT
		        WHERE DEPT_ID = (SELECT MAJOR_CODE
		                        FROM STUDENT
		                        WHERE STU_NO = S.STU_NO
		                        )) AS MAJOR_NAME
		    , MINOR_CODE
		    , (SELECT DEPT_NAME
		        FROM DEPT
		        WHERE DEPT_ID = (SELECT MINOR_CODE
		                        FROM STUDENT
		                        WHERE STU_NO = S.STU_NO
		                        )) AS MINOR_NAME
		    , STU_STATUS
	        , M.MEM_EMAIL
	        , M.MEM_PHONE
	        , M.POSTCODE
	        , M.MEM_ADDR
	        , M.MEM_TEL
		FROM MEMBER M, STUDENT S, COLLEGE C, DEPT D
		WHERE M.MEM_NO=S.MEM_NO
		AND C.COLL_NO=S.COLL_NO
		AND D.DEPT_ID=S.MAJOR_CODE
		AND M.MEM_NO = #{stuNo}
	</select>
	
	<update id="updateChange">
		UPDATE CHANGE_MAJOR
		SET
		UPDATE_DATE = SYSDATE
		, STATUS = 'Y'
		WHERE STU_NO = #{stuNo}
	</update>
	
	<update id="updateRealChange">
		UPDATE STUDENT
		SET
		COLL_NO = (SELECT UP_COLL FROM CHANGE_MAJOR WHERE STU_NO = #{stuNo})
		, MAJOR_CODE = (SELECT UP_DEPT FROM CHANGE_MAJOR WHERE STU_NO = #{stuNo})
		WHERE STU_NO = #{stuNo}
	</update>
	
	<insert id="insertGetOut">
		INSERT INTO GET_OUT (
			GETOUT_NO
			, STU_NO
			, GETOUT_REASON
		) VALUES (
			(SELECT NVL(MAX(GETOUT_NO) + 1 , 1) FROM GET_OUT)
			, #{stuNo}
			, #{getOutReason}
		)
		
	</insert>
	
	<update id="updateGetOut">
		UPDATE STUDENT
		SET
		STU_STATUS = '제적'
		WHERE STU_NO = #{stuNo}
	</update>

	<update id="updateOkayDoubleMajor">
		UPDATE DOUBLE_MAJOR
		SET
		STATUS = 'Y'
		, UPDATE_DATE = SYSDATE
		WHERE STU_NO = #{stuNo}
	</update>

	<update id="regDoubleMajor">
		UPDATE STUDENT
		SET MINOR_CODE = (SELECT DOUBLE_DEPT FROM DOUBLE_MAJOR WHERE STU_NO = #{stuNo})
		WHERE STU_NO = #{stuNo}
	</update>

</mapper>












